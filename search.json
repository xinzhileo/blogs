[{"title":"异常发送邮件","url":"/2019/01/12/异常发送邮件/","content":"\n```\n\npublic class DefaultHttpExceptionHandler implements HttpExceptionHandler {\n    private static final Logger logger = LoggerFactory.getLogger(DefaultHttpExceptionHandler.class);\n    private static final int EXCEPTION_SWITH = PropertyUtils.getInt(\"exception.remind.switch\", 1);\n    private static final String EXCEPTION_PROJECT = PropertyUtils.getString(\"exception.remind.project\", \"not set\");\n    private static final String EXCEPTION_PROFILE = PropertyUtils.getString(\"exception.remind.profile\", \"prod\");\n    private static final String LOCAL_IP = StrUtils.getLocalHostAddress();\n\n    public DefaultHttpExceptionHandler() {\n    }\n\n    public void exceptionHandle(HttpRequest request, HttpResponse response, Exception exception) {\n        try {\n            SecurityUtils.getSubject().logout();\n        } catch (Exception var5) {\n            ;\n        }\n\n        if (!(exception instanceof AuthenticationException) && !(exception instanceof UnauthenticatedException) && !(exception.getCause() instanceof AuthenticationException) && !(exception.getCause() instanceof UnauthenticatedException)) {\n            if (!(exception instanceof UnauthorizedException) && !(exception.getCause() instanceof UnauthorizedException)) {\n                if (exception instanceof FinhubException) {\n                    ResponseResultUtils.fail(response, (FinhubException)exception);\n                } else if (exception.getCause() != null && exception.getCause() instanceof FinhubException) {\n                    ResponseResultUtils.fail(response, (FinhubException)exception.getCause());\n                } else if (exception.getCause() != null && exception.getCause() instanceof ValidateException) {\n                    ResponseResultUtils.fail(response, new FinhubException(600, exception.getCause().getMessage()));\n                } else {\n                    FinhubLogger.error(\"内部错误\", new Object[]{exception});\n                    logger.error(ExceptionUtils.getErrorMessageWithNestedException(exception), exception);\n                    this.exceptionRemind(request, exception);\n                    ResponseResultUtils.exception(response);\n                }\n            } else {\n                ResponseResultUtils.fail(response, new FinhubException(403));\n            }\n        } else {\n            ResponseResultUtils.fail(response, new FinhubException(401));\n        }\n\n    }\n\n    protected void exceptionRemind(HttpRequest request, Exception exception) {\n        try {\n            if (EXCEPTION_SWITH == 0) {\n                return;\n            }\n\n            String url = \"http://mail.com/mail/inner\";\n            Map<String, Object> content = Maps.newLinkedHashMap();\n            content.put(\"toList\", Lists.newArrayList(new String[]{\"rd@xxx.com\"}));\n            content.put(\"subject\", StrUtils.formatString(\"项目【{0}】【{1}】【{2}】发生内部错误\", new Object[]{EXCEPTION_PROJECT, EXCEPTION_PROFILE, LOCAL_IP}));\n            StringBuffer text = new StringBuffer();\n            text.append(\"requestId：\").append(request.getRequestId()).append(\"\\n\");\n            text.append(\"requestURI：\").append(request.getUri()).append(\"\\n\");\n            if (exception.getCause() != null && exception.getCause() instanceof Exception) {\n                exception = (Exception)exception.getCause();\n            }\n\n            text.append(\"exception：\").append(ExceptionUtils.getStackTraceAsString(exception));\n            content.put(\"text\", text.toString());\n            HttpClientUtils.postBody(url, JSON.toJSONString(content));\n        } catch (Exception var6) {\n            logger.error(\"发送异常邮件异常：\" + var6.getMessage(), var6);\n        }\n\n    }\n}\n\n```\n"},{"title":"Java 流式写法","url":"/2018/07/16/Java Lambda/","content":"\n本文列举了十个使用一行代码即可独立完成(不依赖其他代码)的业务逻辑，主要依赖的是Java8中的Lambda和Stream等新特性以及try-with-resources、JAXB等。\n\n1. 对列表/数组中的每个元素都乘以2\n\n```\n// Range是半开区间\nint[] ia = range(1, 10).map(i -> i * 2).toArray();\nList<Integer> result = range(1, 10).map(i -> i * 2).boxed().collect(toList());\n```\n\n2.计算集合/数组中的数字之和\n\n```\nrange(1, 1000).sum();\nrange(1, 1000).reduce(0, Integer::sum);\nStream.iterate(0, i -> i + 1).limit(1000).reduce(0, Integer::sum);\nIntStream.iterate(0, i -> i + 1).limit(1000).reduce(0, Integer::sum);\n```\n\n3.验证字符串是否包含集合中的某一字符串\n\n```\nfinal List<String> keywords = Arrays.asList(\"brown\", \"fox\", \"dog\", \"pangram\");\nfinal String tweet = \"The quick brown fox jumps over a lazy dog. #pangram http://www.rinkworks.com/words/pangrams.shtml\";\n\nkeywords.stream().anyMatch(tweet::contains);\nkeywords.stream().reduce(false, (b, keyword) -> b || tweet.contains(keyword), (l, r) -> l || r);\n```\n\n4.读取文件内容\n\n```\n原作者认为try with resources也是一种单行代码编程。\n\ntry (BufferedReader reader = new BufferedReader(new FileReader(\"data.txt\"))) {\n  String fileText = reader.lines().reduce(\"\", String::concat);\n}\n\ntry (BufferedReader reader = new BufferedReader(new FileReader(\"data.txt\"))) {\n  List<String> fileLines = reader.lines().collect(toCollection(LinkedList<String>::new));\n}\n\ntry (Stream<String> lines = Files.lines(new File(\"data.txt\").toPath(), Charset.defaultCharset())) {\n  List<String> fileLines = lines.collect(toCollection(LinkedList<String>::new));\n}\n```\n\n5.输出歌曲《Happy Birthday to You!》 – 根据集合中不同的元素输出不同的字符串\n\n```\nrange(1, 5).boxed().map(i -> { out.print(\"Happy Birthday \"); if (i == 3) return \"dear NAME\"; else return \"to You\"; }).forEach(out::println);\n\n```\n6.过滤并分组集合中的数字\n\n```\nMap<String, List<Integer>> result = Stream.of(49, 58, 76, 82, 88, 90).collect(groupingBy(forPredicate(i -> i > 60, \"passed\", \"failed\")));\n\n```\n7.获取并解析xml协议的Web Service\n\n```\nFeedType feed = JAXB.unmarshal(new URL(\"http://search.twitter.com/search.atom?&q=java8\"), FeedType.class);\nJAXB.marshal(feed, System.out);\n\n```\n\n8.获得集合中最小/最大的数字\n\n```\nint min = Stream.of(14, 35, -7, 46, 98).reduce(Integer::min).get();\nmin = Stream.of(14, 35, -7, 46, 98).min(Integer::compare).get();\nmin = Stream.of(14, 35, -7, 46, 98).mapToInt(Integer::new).min();\n\nint max = Stream.of(14, 35, -7, 46, 98).reduce(Integer::max).get();\nmax = Stream.of(14, 35, -7, 46, 98).max(Integer::compare).get();\nmax = Stream.of(14, 35, -7, 46, 98).mapToInt(Integer::new).max();\n```\n\n\n9.并行处理\n\n```\nlong result = dataList.parallelStream().mapToInt(line -> processItem(line)).sum();\n```\n\n10.集合上的各种查询(LINQ in Java)\n\n```\nList<Album> albums = Arrays.asList(unapologetic, tailgates, red);\n\n//筛选出至少有一个track评级4分以上的专辑，并按照名称排序后打印出来。\nalbums.stream()\n  .filter(a -> a.tracks.stream().anyMatch(t -> (t.rating >= 4)))\n  .sorted(comparing(album -> album.name))\n  .forEach(album -> System.out.println(album.name));\n\n//合并所有专辑的track\nList<Track> allTracks = albums.stream()\n  .flatMap(album -> album.tracks.stream())\n  .collect(toList());\n\n//根据track的评分对所有track分组\nMap<Integer, List<Track>> tracksByRating = allTracks.stream()\n  .collect(groupingBy(Track::getRating));\n\n```\n"},{"title":"各个App薅流量(联通卡)","url":"/2018/07/04/薅流量/","content":"\n* 京东领流量\n* 滴滴领流量\n* 支付宝领流量\n* 飞猪领流量\n* 饿了么流量\n* 菜鸟裹裹兑换流量\n"},{"title":"SQL慢查询","url":"/2018/07/04/SQL慢查询/","content":"\nid : 查询序列号为1。\nselect_type : 查询类型是简单查询，简单的select语句没有union和子查询。\ntable : 表是 itdragon_order_list。\npartitions : 没有分区。\ntype : 连接类型，all表示采用全表扫描的方式。\npossible_keys : 可能用到索引为null。\nkey : 实际用到索引是null。\nkey_len : 索引长度当然也是null。\nref : 没有哪个列或者参数和key一起被使用。\nExtra : 使用了where查询。\n"},{"title":"Lambda不同写法","url":"/2018/07/04/Lambda不同写法/","content":"\n```\n    /**获取单词，并且去重**/\n    List<String> list = Arrays.asList(\"hello welcome\", \"world hello\", \"hello world\",\n            \"hello world welcome\");\n\n    //map和flatmap的区别\n    list.stream().map(item -> Arrays.stream(item.split(\" \"))).distinct().collect(Collectors.toList()).forEach(System.out::println);\n    System.out.println(\"---------- \");\n    list.stream().flatMap(item -> Arrays.stream(item.split(\" \"))).distinct().collect(Collectors.toList()).forEach(System.out::println);\n\n    //实际上返回的类似是不同的\n    List<Stream<String>> listResult = list.stream().map(item -> Arrays.stream(item.split(\" \"))).distinct().collect(Collectors.toList());\n    List<String> listResult2 = list.stream().flatMap(item -> Arrays.stream(item.split(\" \"))).distinct().collect(Collectors.toList());\n\n    System.out.println(\"---------- \");\n\n    //也可以这样\n    list.stream().map(item -> item.split(\" \")).flatMap(Arrays::stream).distinct().collect(Collectors.toList()).forEach(System.out::println);\n\n    System.out.println(\"================================================\");\n\n    /**相互组合**/\n    List<String> list2 = Arrays.asList(\"hello\", \"hi\", \"你好\");\n    List<String> list3 = Arrays.asList(\"zhangsan\", \"lisi\", \"wangwu\", \"zhaoliu\");\n\n    list2.stream().map(item -> list3.stream().map(item2 -> item + \" \" + item2)).collect(Collectors.toList()).forEach(System.out::println);\n    list2.stream().flatMap(item -> list3.stream().map(item2 -> item + \" \" + item2)).collect(Collectors.toList()).forEach(System.out::println);\n\n    //实际上返回的类似是不同的\n    List<Stream<String>> list2Result = list2.stream().map(item -> list3.stream().map(item2 -> item + \" \" + item2)).collect(Collectors.toList());\n    List<String> list2Result2 = list2.stream().flatMap(item -> list3.stream().map(item2 -> item + \" \" + item2)).collect(Collectors.toList());\n\n\n```\n"},{"title":"SQL注意事项","url":"/2018/07/04/SQL注意事项/","content":"\n通过explain的参数介绍，我们可以得知：\n1. 表的读取顺序(id)\n2. 数据读取操作的操作类型(type)\n3. 哪些索引被实际使用(key)\n4. 表之间的引用(ref)\n5. 每张表有多少行被优化器查询(rows)\n\n性能下降的原因\n从程序员的角度\n1. 查询语句写的不好\n2. 没建索引，索引建的不合理或索引失效\n3. 关联查询有太多的join\n\n从服务器的角度\n1. 服务器磁盘空间不足\n2. 服务器调优配置参数设置不合理\n\n总结\n1. 索引是排好序且快速查找的数据结构。其目的是为了提高查询的效率。\n2. 创建索引后，查询数据变快，但更新数据变慢。\n3. 性能下降的原因很可能是索引失效导致。\n4. 索引创建的原则，经常查询的字段适合创建索引，频繁需要更新的数据不适合创建索引。\n5. 索引字段频繁更新，或者表数据物理删除容易造成索引失效。\n6. 擅用 explain 分析sql语句\n7. 除了优化sql语句外，还可以优化表的设计。如尽量做成单表查询，减少表之间的关联。设计归档表等。\n"},{"title":"基础类型转换","url":"/2018/07/04/ObjUtils/","content":"\n```\n\n    import org.apache.commons.collections4.MapUtils;\n    import org.apache.commons.lang3.ArrayUtils;\n    import org.apache.commons.lang3.StringUtils;\n    import org.apache.commons.lang3.builder.ToStringBuilder;\n    import org.dozer.DozerBeanMapper;\n    import org.dozer.Mapper;\n\n    import java.math.BigDecimal;\n    import java.util.ArrayList;\n    import java.util.Collection;\n    import java.util.List;\n    import java.util.Map;\n\n    public class ObjUtils {\n\n    private static final String NULL_VALUE = \"NULL\";\n    private static final String EMPTY_VALUE = \"\";\n    private static final String COMMA = \",\";\n    private static final String BOOLEAN_TRUE = \"TRUE\";\n    private static final String BOOLEAN_FALSE = \"FALSE\";\n    private static final String BOOLEAN_T = \"T\";\n    private static final String BOOLEAN_F = \"F\";\n    private static final String BOOLEAN_Y = \"Y\";\n    private static final String BOOLEAN_N = \"N\";\n    private static final String BOOLEAN_1 = \"1\";\n    private static final String BOOLEAN_0 = \"0\";\n\n    private static Mapper mapper;\n\n    public static <T> T ifNull(T object, T defaultValue) {\n        return object == null ? defaultValue : object;\n    }\n\n    public static boolean isNull(Object value) {\n        if (value == null) {\n            return true;\n        } else if (value instanceof String && NULL_VALUE.equalsIgnoreCase((String) value)) {\n            return true;\n        }\n        return false;\n    }\n\n    public static boolean isEmpty(Object value) {\n        if (value == null) {\n            return true;\n        } else if (value instanceof String) {\n            if (StringUtils.isEmpty((String) value) || NULL_VALUE.equalsIgnoreCase((String) value)) {\n                return true;\n            }\n        } else if (value instanceof Collection && CollectionUtils.isEmpty((Collection) value)) {\n            return true;\n        } else if (value instanceof Map && MapUtils.isEmpty((Map) value)) {\n            return true;\n        }\n        return false;\n    }\n\n    public static boolean isNotEmpty(Object value) {\n        return !isEmpty(value);\n    }\n\n    public static <T> boolean isEmpty(final T[] array) {\n        return ArrayUtils.isEmpty(array);\n    }\n\n    public static <T> boolean isNotEmpty(final T[] array) {\n        return ArrayUtils.isNotEmpty(array);\n    }\n\n    public static boolean isBlank(Object value) {\n        if (value == null) {\n            return true;\n        } else if (value instanceof String) {\n            if (StringUtils.isBlank((String) value) || NULL_VALUE.equalsIgnoreCase((String) value)) {\n                return true;\n            }\n        }\n        return false;\n    }\n\n    public static boolean isNotBlank(Object value) {\n        return !isBlank(value);\n    }\n\n    public static String toString(Object obj) {\n        if (obj == null) {\n            return null;\n        }\n        if (obj instanceof String) {\n            return (String) obj;\n        }\n        return obj.toString();\n    }\n\n    public static String toString(Object obj, String defaultValue) {\n        return ifNull(toString(obj), defaultValue);\n    }\n\n    public static String toStringTrim(Object obj) {\n        String value = toString(obj);\n        if (value == null) {\n            return null;\n        }\n        return value.trim();\n    }\n\n    public static String toStringTrim(Object obj, String defaultValue) {\n        return ifNull(toStringTrim(obj), defaultValue);\n    }\n\n    public static Integer toInteger(Object obj) {\n        if (isEmpty(obj)) {\n            return null;\n        }\n        if (obj instanceof Integer) {\n            return (Integer) obj;\n        }\n        if (obj instanceof Number) {\n            return ((Number) obj).intValue();\n        }\n        // 处理字符串值\n        String strValue = obj.toString().trim();\n        // 处理千分位\n        if (strValue.contains(COMMA)) {\n            strValue = strValue.replaceAll(COMMA, EMPTY_VALUE);\n        }\n        try {\n            return new BigDecimal(strValue).intValue();\n        } catch (Exception e) {\n        }\n        return null;\n    }\n\n    public static Integer toInteger(Object obj, Integer defaultValue) {\n        return ifNull(toInteger(obj), defaultValue);\n    }\n\n    public static Long toLong(Object obj) {\n        if (isEmpty(obj)) {\n            return null;\n        }\n        if (obj instanceof Long) {\n            return (Long) obj;\n        }\n        if (obj instanceof Number) {\n            return ((Number) obj).longValue();\n        }\n        // 处理字符串值\n        String strValue = obj.toString().trim();\n        // 处理千分位\n        if (strValue.contains(COMMA)) {\n            strValue = strValue.replaceAll(COMMA, EMPTY_VALUE);\n        }\n        try {\n            return new BigDecimal(strValue).longValue();\n        } catch (Exception e) {\n        }\n        return null;\n    }\n\n    public static Long toLong(Object obj, Long defaultValue) {\n        return ifNull(toLong(obj), defaultValue);\n    }\n\n    public static BigDecimal toBigDecimal(Object obj) {\n        if (isEmpty(obj)) {\n            return null;\n        }\n        if (obj instanceof BigDecimal) {\n            return (BigDecimal) obj;\n        }\n        // 处理字符串值\n        String strValue = obj.toString().trim();\n        // 处理千分位\n        if (strValue.contains(COMMA)) {\n            strValue = strValue.replaceAll(COMMA, EMPTY_VALUE);\n        }\n        try {\n            return new BigDecimal(strValue);\n        } catch (Exception e) {\n        }\n        return null;\n    }\n\n    public static BigDecimal toBigDecimal(Object obj, BigDecimal defaultValue) {\n        return ifNull(toBigDecimal(obj), defaultValue);\n    }\n\n    public static Boolean toBoolean(Object obj) {\n        if (isEmpty(obj)) {\n            return null;\n        }\n        if (obj instanceof Boolean) {\n            return (Boolean) obj;\n        }\n        if (obj instanceof Number) {\n            return Boolean.valueOf(((Number) obj).intValue() == 1);\n        }\n        // 处理字符串值\n        String strValue = obj.toString().trim();\n        if (BOOLEAN_TRUE.equalsIgnoreCase(strValue)\n                || BOOLEAN_T.equalsIgnoreCase(strValue)\n                || BOOLEAN_Y.equalsIgnoreCase(strValue)\n                || BOOLEAN_1.equals(strValue)) {\n            return Boolean.TRUE;\n        }\n        if (BOOLEAN_FALSE.equalsIgnoreCase(strValue)\n                || BOOLEAN_F.equalsIgnoreCase(strValue)\n                || BOOLEAN_N.equalsIgnoreCase(strValue)\n                || BOOLEAN_0.equals(strValue)) {\n            return Boolean.FALSE;\n        }\n        return null;\n    }\n\n    public static Boolean toBoolean(Object obj, Boolean defaultValue) {\n        return ifNull(toBoolean(obj), defaultValue);\n    }\n\n    public static boolean toboolean(Object obj) {\n        return toBoolean(obj, false);\n    }\n\n    public static Mapper getMapper() {\n        if (mapper == null) {\n            synchronized (ObjUtils.class) {\n                if (mapper == null) {\n                    mapper = new DozerBeanMapper();\n                }\n            }\n        }\n        return mapper;\n    }\n\n    public static void map(Object source, Object destination) {\n        getMapper().map(source, destination);\n    }\n\n    public static <T> T map(Object source, Class<T> destinationClass) {\n        return getMapper().map(source, destinationClass);\n    }\n\n    public static String prop2String(Object obj) {\n        if (obj == null) {\n            return null;\n        }\n        return ToStringBuilder.reflectionToString(obj);\n    }\n\n    public static Integer[] string2IntAry(String str, String separatorChars, Integer defaultValue) {\n        if (isBlank(str)) {\n            return null;\n        }\n        String[] strAry = StringUtils.split(str, separatorChars);\n        Integer[] intAry = new Integer[strAry.length];\n        for (int i = 0; i < strAry.length; i++) {\n            intAry[i] = toInteger(strAry[i], defaultValue);\n        }\n        return intAry;\n    }\n\n    public static List<Integer> string2IntList(String str, String separatorChars, Integer defaultValue) {\n        if (isBlank(str)) {\n            return new ArrayList<Integer>(1);\n        }\n        String[] strAry = StringUtils.split(str, separatorChars);\n        List<Integer> intList = new ArrayList<Integer>(strAry.length);\n        for (int i = 0; i < strAry.length; i++) {\n            intList.add(toInteger(strAry[i], defaultValue));\n        }\n        return intList;\n    }\n\n    public static Long[] string2LongAry(String str, String separatorChars, Long defaultValue) {\n        if (isBlank(str)) {\n            return null;\n        }\n        String[] strAry = StringUtils.split(str, separatorChars);\n        Long[] longAry = new Long[strAry.length];\n        for (int i = 0; i < strAry.length; i++) {\n            longAry[i] = toLong(strAry[i], defaultValue);\n        }\n        return longAry;\n    }\n\n    public static List<Long> string2LongList(String str, String separatorChars, Long defaultValue) {\n        if (isBlank(str)) {\n            return new ArrayList<Long>(1);\n        }\n        String[] strAry = StringUtils.split(str, separatorChars);\n        List<Long> longList = new ArrayList<Long>(strAry.length);\n        for (int i = 0; i < strAry.length; i++) {\n            longList.add(toLong(strAry[i], defaultValue));\n        }\n        return longList;\n    }\n\n    }\n\n\n```\n"},{"title":"JsonUtils工具","url":"/2018/07/04/JsonUtils工具/","content":"\nJson 转换为Model,采用ObjectMapper作为映射\n\n```\nimport com.fasterxml.jackson.annotation.JsonInclude.Include;\nimport com.fasterxml.jackson.databind.DeserializationFeature;\nimport com.fasterxml.jackson.databind.JavaType;\nimport com.fasterxml.jackson.databind.ObjectMapper;\nimport com.fasterxml.jackson.databind.PropertyNamingStrategy;\nimport java.io.IOException;\nimport java.text.SimpleDateFormat;\nimport java.util.Collection;\nimport java.util.Map;\nimport org.apache.commons.lang3.StringUtils;\nimport org.slf4j.Logger;\nimport org.slf4j.LoggerFactory;\n\npublic class JsonUtils {\n    private static Logger logger = LoggerFactory.getLogger(JsonUtils.class);\n    private static ObjectMapper defaultMapper = new ObjectMapper();\n    private static ObjectMapper snakeMapper;\n\n    public JsonUtils() {\n    }\n\n    public static String toJson(Object obj) {\n        try {\n            return obj == null ? null : defaultMapper.writeValueAsString(obj);\n        } catch (IOException var2) {\n            logger.error(\"[writeValueAsString]：\" + var2.getMessage(), var2);\n            return null;\n        }\n    }\n\n    public static String toJsonSnake(Object obj) {\n        try {\n            return obj == null ? null : snakeMapper.writeValueAsString(obj);\n        } catch (IOException var2) {\n            logger.error(\"[writeValueAsString]：\" + var2.getMessage(), var2);\n            return null;\n        }\n    }\n\n    public static <T> T toObj(String json, Class<T> clazz) {\n        try {\n            return StringUtils.isEmpty(json) ? null : defaultMapper.readValue(json, clazz);\n        } catch (IOException var3) {\n            logger.error(\"[readValue]：\" + var3.getMessage(), var3);\n            return null;\n        }\n    }\n\n    public static <T> T toObjSnake(String json, Class<T> clazz) {\n        try {\n            return StringUtils.isEmpty(json) ? null : snakeMapper.readValue(json, clazz);\n        } catch (IOException var3) {\n            logger.error(\"[readValue]：\" + var3.getMessage(), var3);\n            return null;\n        }\n    }\n\n    public static <T> T toObj(String json, Class<? extends Collection> collectionClass, Class<?> elementClass) {\n        try {\n            if (StringUtils.isEmpty(json)) {\n                return null;\n            } else {\n                JavaType javaType = defaultMapper.getTypeFactory().constructCollectionType(collectionClass, elementClass);\n                return defaultMapper.readValue(json, javaType);\n            }\n        } catch (IOException var4) {\n            logger.error(\"[toObj]\" + var4.getMessage(), var4);\n            return null;\n        }\n    }\n\n    public static <T> T toObj(String json, Class<? extends Map> mapClass, Class<?> keyClass, Class<?> valueClass) {\n        try {\n            if (StringUtils.isEmpty(json)) {\n                return null;\n            } else {\n                JavaType javaType = defaultMapper.getTypeFactory().constructMapType(mapClass, keyClass, valueClass);\n                return defaultMapper.readValue(json, javaType);\n            }\n        } catch (IOException var5) {\n            logger.error(\"[toObj]\" + var5.getMessage(), var5);\n            return null;\n        }\n    }\n\n    public static String formatJson(String json) {\n        try {\n            if (json == null) {\n                return null;\n            } else {\n                Object obj = defaultMapper.readValue(json, Object.class);\n                return defaultMapper.writerWithDefaultPrettyPrinter().writeValueAsString(obj);\n            }\n        } catch (Exception var2) {\n            logger.error(\"[formatJson]：\" + var2.getMessage(), var2);\n            return json;\n        }\n    }\n\n    static {\n        defaultMapper.setSerializationInclusion(Include.NON_NULL);\n        defaultMapper.setDateFormat(new SimpleDateFormat(\"yyyy-MM-dd HH:mm:ss\"));\n        defaultMapper.disable(DeserializationFeature.FAIL_ON_UNKNOWN_PROPERTIES);\n        snakeMapper = new ObjectMapper();\n        snakeMapper.setSerializationInclusion(Include.NON_NULL);\n        snakeMapper.setDateFormat(new SimpleDateFormat(\"yyyy-MM-dd HH:mm:ss\"));\n        snakeMapper.disable(DeserializationFeature.FAIL_ON_UNKNOWN_PROPERTIES);\n        snakeMapper.setPropertyNamingStrategy(PropertyNamingStrategy.CAMEL_CASE_TO_LOWER_CASE_WITH_UNDERSCORES);\n    }\n}\n\n```\n","tags":["Java"]},{"title":"Lambda表达式","url":"/2018/07/04/Lambda表达式/","content":"\n1.List 数组steam 处理：\n\n```\nList<Integer> nums = Lists.newArrayList(1,1,null,2,3,4,null,5,6,7,8,9,10);\n         System.out.println(“求和：”+nums\n                 .stream()//转成Stream\n                 .filter(team -> team!=null)//过滤\n                 .distinct()//去重\n                 .mapToInt(num->num*2)//map操作\n                 .skip(2)//跳过前2个元素\n                 .limit(4)//限制取前4个元素\n                 .peek(System.out::println)//流式处理对象函数\n                 .sum());\n\n```\n\n2.Lamda 求最小、求和等\n\n```\n// 求最小年龄\nOptional<Student> olderStudent3 = students.stream().collect(Collectors.minBy(Comparator.comparing(Student::getAge)));\n\n//求年龄总和\nint totalAge4 = students.stream().collect(Collectors.summingInt(Student::getAge));\n\nString names = students.stream().map(Student::getName).collect(Collectors.joining(“, “));\n// 输出：孔明, 伯约, 玄德, 云长, 翼德, 元直, 奉孝, 仲谋, 鲁肃, 丁奉\n\njava8还提供了parallelStream()来启动并行流式处理\n\n```\n\n3.分页\n\n`int totalPage = (int) (total % pageSize == 0 ? total / pageSize : (total / pageSize + 1));`\n\n4.生成一个范围的随机数\n\n`int randNumber = rand.nextInt(MAX - MIN + 1) + MIN`\n\n5.\n\n```\nArea city = areaList.stream()\n                .filter(area -> AreaTypeEnums.City.equals(area.getAreaType()))\n                .findFirst()\n                .orElse(null);\n\n个位   143%10=3\n十位    143/10%10=4\n百位    143/100 =1\n\n```\n\n6.\n\n```\nLambda表达式\npublic static Predicate<String> checkIfStartsWith(final String letter) {   \nreturn name -> name.startsWith(letter);  \n}  \n\nfinal long countFriendsStartN =  \nfriends.stream() .filter(checkIfStartsWith(“N”)).count();  \nfinal long countFriendsStartB = friends.stream()  \n.filter(checkIfStartsWith(“B”)).count();\n\n```\n","tags":["Java"]},{"title":"善良","url":"/2018/07/04/善良/","content":"\n> 如果你的道德观念不是源于你自己对自己的要求，而来自对他人的迎合、对自身利益的计算、对自私自爱等欲望的满足，那么这些“他律”支配的行为通通都称不上真正的道德，充其量是一种“伪善”。\n\n> 别人说的话，不要轻易相信，要学会印证。\n"},{"title":"认知","url":"/2018/07/04/hello-world/","content":"\n> 当我们决定做任何事之前，我们是不是早就知道我们将要做出的决定呢？比如说当我们将要见一个陌生人，我们对这个人的第一印象是在接触之后形成，还是在见面之前听他人描述这个人时就已经形成呢？\n\n> 当我们进行重大事务的决策时，我们总会认为我们的决定是经过自己的深思熟虑而做出的，但是事实真的如此么？\n\n> 我们每天都见到不同的人，遇见不同的事，我们都认为自己有一个“开放包容”的心，但是我们的本能，却让这“开放包容”变得很难完全实现。\n\n> 因为不管有意识无意识，至少在最初阶段，我们都会从本能地将不符合或不支持我们自己观点的信息筛选排除。这就是我们常说的认知偏差。\n\n> 而这些认知偏差，影响着我们的生活中的方方面面，金融，健康，政治，科学等等，都无法避免这些认知偏差。\n"}]